openapi: 3.0.3
info:
  title: Intern_NS_Back API
  version: 1.0.0
  description: >
    Backend (Fastify + TypeScript + Prisma/Mongo).
    Endpoints for healthcheck, RSS parsing, authentication, and AdServer.
servers:
  - url: https://internnsback-production.up.railway.app
    description: Production (Railway)
  - url: http://localhost:3500
    description: Local
tags:
  - name: Health
  - name: Feed
  - name: Auth
  - name: AdServer - Line Items
  - name: AdServer - Bid Server
paths:
  /:
    get:
      tags: [Health]
      summary: Root ping
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  service: { type: string }
                example: { ok: true, service: "Intern_NS_Back" }

  /health:
    get:
      tags: [Health]
      summary: Health check
      responses:
        '200':
          description: Service OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                example: { ok: true }

  /feed:
    get:
      tags: [Feed]
      summary: Get RSS feed (parsing)
      description: >
        If **url** is not provided, uses default `DEFAULT_FEED_URL` from ENV.
      parameters:
        - in: query
          name: url
          schema: { type: string, format: uri }
          required: false
          description: Full RSS/ATOM URL
      responses:
        '200':
          description: Successful parsing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '502':
          description: Failed to fetch/parse feed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/parse:
    post:
      tags: [Feed]
      summary: Parse feed from request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string, format: uri }
      responses:
        '200':
          description: Successful parsing
          content:
            application/json:
              schema: { $ref: '#/components/schemas/FeedResponse' }
        '400':
          description: Invalid request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '502':
          description: Failed to fetch/parse feed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/register:
    post:
      tags: [Auth]
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '409':
          description: User already exists
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '400':
          description: Invalid data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/log/in:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email, example: "admin@example.com" }
                password: { type: string, example: "12345678" }
      responses:
        '200':
          description: Authorized (cookie set)
          headers:
            Set-Cookie:
              schema: { type: string }
              description: Session cookie
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/log/out:
    post:
      tags: [Auth]
      summary: Logout (clear session)
      responses:
        '204':
          description: Session terminated

  /api/whoami:
    get:
      tags: [Auth]
      summary: Current user (by cookie/session)
      responses:
        '200':
          description: Authorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/adserver/lineitem/form:
    get:
      tags: [AdServer - Line Items]
      summary: Render line item creation form (SSR)
      description: >
        Generates HTML form on backend and returns it to the client.
        Form includes fields: size, cpmMin, cpmMax, geo, adType, frequency, creative (file upload).
      responses:
        '200':
          description: HTML form
          content:
            text/html:
              schema:
                type: string
                description: Server-rendered HTML form
        '500':
          description: Failed to generate form
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/adserver/lineitem/save:
    post:
      tags: [AdServer - Line Items]
      summary: Create new line item with creative
      description: >
        Upload creative file and create line item with targeting parameters.
        Accepts multipart/form-data with fields and file upload.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [size, cpmMin, cpmMax, geo, adType, frequency, creative]
              properties:
                size:
                  type: string
                  description: Ad size in format WIDTHxHEIGHT
                  example: "300x250"
                cpmMin:
                  type: number
                  description: Minimum CPM price
                  example: 1.5
                cpmMax:
                  type: number
                  description: Maximum CPM price
                  example: 5.0
                geo:
                  type: string
                  description: Two-letter country code
                  example: "US"
                adType:
                  type: string
                  enum: [banner, video, native]
                  description: Type of advertisement
                frequency:
                  type: integer
                  description: Maximum impressions per user per 24 hours
                  example: 3
                creative:
                  type: string
                  format: binary
                  description: Creative file (image/video)
      responses:
        '201':
          description: Line item created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: "Line item created" }
                  creativeId: { type: string }
                  lineItemId: { type: string }
                  fileUrl: { type: string, example: "/creatives/uuid.png" }
        '400':
          description: Invalid data or validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /api/adserver/bid:
    post:
      tags: [AdServer - Bid Server]
      summary: Process bid request from bid adapter
      description: >
        Filters line items by size, geo, adType, CPM range and frequency capping.
        Returns best matching line item with highest CPM.
        Implements auction logic and tracks impressions per user IP.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidRequest'
      responses:
        '200':
          description: Suitable line item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidResponse'
        '404':
          description: No suitable line items found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No suitable line items found"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  schemas:
    FeedItem:
      type: object
      properties:
        title: { type: string }
        link: { type: string }
        pubDate: { type: string }
        author: { type: string }
        categories:
          type: array
          items: { type: string }
        summary: { type: string }
        content: { type: string }

    FeedResponse:
      type: object
      properties:
        sourceUrl: { type: string, format: uri }
        title: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/FeedItem' }
      example:
        sourceUrl: "https://rss.nytimes.com/services/xml/rss/nyt/World.xml"
        title: "NYTimes > World News"
        items:
          - title: "Sample"
            link: "https://example.com/article"
            pubDate: "Mon, 01 Jan 2025 00:00:00 GMT"
            author: "Author"
            categories: ["World"]
            summary: "Short summary"

    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string }

    BidRequest:
      type: object
      required: [size, geo, adType, bidPrice, userIp]
      properties:
        size:
          type: string
          pattern: "^\\d+x\\d+$"
          description: Ad size in format WIDTHxHEIGHT
          example: "300x250"
        geo:
          type: string
          minLength: 2
          maxLength: 2
          description: Two-letter country code
          example: "US"
        adType:
          type: string
          enum: [banner, video, native]
          description: Type of advertisement
        bidPrice:
          type: number
          minimum: 0.01
          description: CPM bid price from bidder
          example: 2.5
        userIp:
          type: string
          format: ipv4
          description: User IP address for frequency capping
          example: "192.168.1.1"

    BidResponse:
      type: object
      required: [lineItemId, creativeUrl, cpm, size, adType]
      properties:
        lineItemId:
          type: string
          description: Selected line item ID
          example: "68d97dce10bffc74f716d26f"
        creativeUrl:
          type: string
          description: URL of the creative to display
          example: "/creatives/be1ca054-3dca-47be-972b-777c2d39702c.png"
        cpm:
          type: number
          description: Final CPM price
          example: 5.0
        size:
          type: string
          description: Creative size
          example: "300x250"
        adType:
          type: string
          enum: [banner, video, native]
          description: Type of advertisement

    Error:
      type: object
      properties:
        statusCode: { type: integer }
        error: { type: string }
        message: { type: string }